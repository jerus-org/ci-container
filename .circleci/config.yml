version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.61"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@0.23.0

executors:
  ubuntu:
    docker:
      - image: cimg/base:2024.07
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  make-test:
    parameters:
      rust-min-version:
        default: "1.56"
        type: string
    steps:
      - run:
          name: make test for minimum version <<parameters.rust-min-version>>
          command: |
            REPO=jerusdp/ci-rust
            TAG=<<parameters.rust-min-version>>
            docker build --build-arg MIN_RUST_VERSION=<<parameters.rust-min-version>> -t ${REPO}/test:${TAG} --target test .
            docker run --rm ${REPO}/test:${TAG}

  publish_rust_env:
    parameters:
      rust-min-version:
        default: "1.56"
        type: string
    steps:
      - run:
          name: Publish for minimum version <<parameters.rust-min-version>>
          command: |
            REPO=jerusdp/ci-rust
            TAG=<<parameters.rust-min-version>>
            INPUT_RELEASE_VERSION=0.1.0
            docker build --build-arg MIN_RUST_VERSION=<<parameters.rust-min-version>> -t ${REPO}:${TAG} --target final .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${REPO}:${TAG}

  publish_base_cmd:
    steps:
      - run:
          name: Publish for minimum version base
          command: |
            REPO=jerusdp/ci-rust
            INPUT_RELEASE_VERSION=0.1.0
            docker build -t ${REPO}:base --target final .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${REPO}:base

jobs:
  test:
    parameters:
      min-rust-version:
        type: string
    executor: ubuntu
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: default
      - make-test:
          rust-min-version: << parameters.min-rust-version >>

  publish_rustcs:
    parameters:
      min-rust-version:
        type: string
    executor: ubuntu
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.14
      - publish_rust_env:
          rust-min-version: << parameters.min-rust-version >>

  publish_base:
    executor: ubuntu
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.14
      - publish_base_cmd

  make_release:
    executor: rust-env
    parameters:
      ssh_fingerprint:
        type: string
      min_rust_version:
        type: string
      pcu_verbosity:
        type: string
        default: "-vv"
        description: "The verbosity of the pcu command"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << parameters.ssh_fingerprint >>
      - run:
          name: Remove original SSH key from agent
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
      - toolkit/gpg_key
      - toolkit/git_config
      - run:
          name: Update to latest pcu
          command: |
            cargo install --force --git https://github.com/jerus-org/pcu --branch main
      - run:
          name: Install gh
          command: |
            (type -p wget >/dev/null || (apt update && apt-get install wget -y)) \
            && mkdir -p -m 755 /etc/apt/keyrings \
            && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && apt update \
            && apt install gh -y
      - run:
          name: Check gh authentication
          command: |
            gh auth status
            gh config set git_protocol ssh --host github.com
            gh auth status
            # echo $GITHUB_TOKEN | gh auth login --with-token
            # gh auth status
      - run:
          name: Create Github release
          command: |
            set -exo pipefail
            version=$(nextsv -bn calculate)
            pcu <<parameters.pcu_verbosity>> release --release ${version}
            ls -l
            head -n 20 CHANGELOG.md
            git status
            git add CHANGELOG.md
            git status
            git commit -m "chore(release): ${version}"  
            git status
            gh release create v${version} -F release_notes.md
            git push --tags

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          filters:
            branches:
              ignore: main
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - << pipeline.parameters.validation-flag >>
    jobs:
      - test:
          filters:
            branches:
              ignore: main
          matrix: &matrix
            parameters:
              min-rust-version:
                [
                  "1.33",
                  "1.61",
                  "1.65",
                  "1.67",
                  "1.70",
                  "1.71",
                  "1.72",
                  "1.73",
                  "1.74",
                  "1.75",
                  "1.76",
                ]

      - toolkit/update_changelog:
          requires:
            - test
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>

  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/end_success

  publish-only:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - publish_rustcs:
          filters:
            branches:
              only: main
          matrix:
            <<: *matrix

      - publish_base:
          filters:
            branches:
              only: main

  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - make_release:
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          pcu_verbosity: "-vvvv"
